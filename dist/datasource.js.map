{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","console","log","datasourceRequest","encodeURIComponent","expr","method","headers","then","results","i","response","item","rows","push","Date","parse","startsAt","formatInstanceText","labels","legendFormat","alertname","parseInt","severity","now","status","message","title","target","map","replace","refId","JSON","stringify","aliasRegex","text","match","g1"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n    console.log(query);\n    // Format data for table panel\n    if(query.targets[0].type == \"table\"){\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?filter='+encodeURIComponent(query.targets[0].expr || \"\"),\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        var results = {\n          \"data\": [\n            {\n              \"columns\":[\n                {\"text\": \"Time\", \"type\": \"time\"},\n                {\"text\": \"Instance\", \"type\": \"string\"},\n                {\"text\": \"Alertname\", \"type\": \"string\"},\n                {\"text\": \"Severity\", \"type\": \"Number\"}\n              ],\n              \"rows\": [],\n              \"type\": \"table\"\n            }\n          ]\n        };\n        for(var i=0;i<response.data.data.length;i++){\n          var item = response.data.data[i];\n          results.data[0].rows.push([\n            Date.parse(item.startsAt),\n            this.formatInstanceText(item.labels, query.targets[0].legendFormat),\n            item.labels.alertname,\n            parseInt(item.labels.severity)\n          ]);\n        };\n        return results;\n      });\n    }else{\n      return this.backendSrv.datasourceRequest({\n        url: this.url + '/api/v1/alerts?filter='+encodeURIComponent(query.targets[0].expr || \"\"),\n        data: query,\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' }\n      }).then(response => {\n        return {\n          \"data\": [\n            {\n              \"datapoints\": [\n                [response.data.data.length, Date.now()]\n              ]\n            }\n          ]\n        }\n      });\n    }\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api/v1/status',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n      options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target),\n        expr: target.expr,\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie',\n        legendFormat: target.legendFormat || \"\"\n      };\n    });\n    options.targets = targets;\n    return options;\n  }\n\n  formatInstanceText(labels, legendFormat){\n    if(legendFormat == \"\"){\n      return JSON.stringify(labels);\n    }\n    var aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\n    var text = legendFormat.replace(aliasRegex, function(match, g1) {\n      if (labels[g1]) {\n        return labels[g1];\n      }\n      return \"\";\n    });\n    return text;\n  }\n}\n"]}